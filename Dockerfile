# Stage 1: building Node assets
FROM node:17-slim AS nodeassets

# Update system packages as needed (security measure)
# Periodically rebuild image with `docker build --pull --no-cache` to ensure updates
RUN apt-get update && \
    apt-get upgrade -y

COPY js_toolchain /code/js_toolchain
COPY recipesite /code/recipesite
WORKDIR /code/js_toolchain
RUN npm ci
RUN npm run build:prod
# This creates assets we'll find here: /django_app/static/

# Stage 2: building the real project
FROM python:3-slim AS webapp

# Update system packages as needed (security measure)
# Periodically rebuild image with `docker build --pull --no-cache` to ensure updates
RUN apt-get update && \
    apt-get upgrade -y

RUN echo "Switching to non-root user appuser"
RUN adduser appuser
WORKDIR /home/appuser
USER appuser:appuser

RUN echo "Upgrading pip"
RUN python -m pip install --upgrade pip --no-cache-dir

RUN echo "Installing pipenv"
RUN pip install --user pipenv --no-cache-dir
# Adjust path to include .local/bin, so it can find `pipenv` command later
ENV PATH="/home/appuser/.local/bin:${PATH}"

RUN echo "Installing Python dependencies"
COPY Pipfile Pipfile.lock ./
# This installs our pipenv dependencies from the lock file only, into the system.
# No virtual env: no need to use pipenv for executing code in the container: just run `python`
RUN pipenv install --system --deploy --ignore-pipfile

RUN echo "Copying code files"
COPY recipesite/ recipesite/
# COPY wait-for-it.sh /home/appuser/scripts/wait-for-it.sh
# Copy all static files generated by nodeassets container
COPY --from=nodeassets /code/recipesite/static/ /home/appuser/recipesite/static/

WORKDIR /home/appuser/recipesite

CMD ["gunicorn", "-b", "0.0.0.0:8000", "core.asgi:application", "-k", "uvicorn.workers.UvicornWorker"]
# TODO implement logging out from the Docker container, to see all this in action
